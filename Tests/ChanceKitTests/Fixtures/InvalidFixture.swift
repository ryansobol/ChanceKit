@testable import ChanceKit

typealias InvalidFixture = (
  lexeme: String,
  error: ExpressionError
)

let invalidFixtures: [InvalidFixture] = [
  (lexeme: "d", error: .invalidLexeme(lexeme: "d")),
  (lexeme: "-d", error: .invalidLexeme(lexeme: "-d")),
  (lexeme: "d-", error: .invalidLexeme(lexeme: "d-")),
  (lexeme: "-d-", error: .invalidLexeme(lexeme: "-d-")),
  (lexeme: "+d", error: .invalidLexeme(lexeme: "+d")),
  (lexeme: "d+", error: .invalidLexeme(lexeme: "d+")),
  (lexeme: "+d+", error: .invalidLexeme(lexeme: "+d+")),
  (lexeme: "d0", error: .invalidLexeme(lexeme: "d0")),
  (lexeme: "d1", error: .invalidLexeme(lexeme: "d1")),
  (lexeme: "d9", error: .invalidLexeme(lexeme: "d9")),
  (lexeme: "d-0", error: .invalidLexeme(lexeme: "d-0")),
  (lexeme: "d-1", error: .invalidLexeme(lexeme: "d-1")),
  (lexeme: "d-9", error: .invalidLexeme(lexeme: "d-9")),
  (lexeme: "-d0", error: .invalidLexeme(lexeme: "-d0")),
  (lexeme: "-d1", error: .invalidLexeme(lexeme: "-d1")),
  (lexeme: "-d9", error: .invalidLexeme(lexeme: "-d9")),
  (lexeme: "d+0", error: .invalidLexeme(lexeme: "d+0")),
  (lexeme: "d+1", error: .invalidLexeme(lexeme: "d+1")),
  (lexeme: "d+9", error: .invalidLexeme(lexeme: "d+9")),
  (lexeme: "+d0", error: .invalidLexeme(lexeme: "+d0")),
  (lexeme: "+d1", error: .invalidLexeme(lexeme: "+d1")),
  (lexeme: "+d9", error: .invalidLexeme(lexeme: "+d9")),
  (lexeme: "+d-0", error: .invalidLexeme(lexeme: "+d-0")),
  (lexeme: "+d-1", error: .invalidLexeme(lexeme: "+d-1")),
  (lexeme: "+d-9", error: .invalidLexeme(lexeme: "+d-9")),
  (lexeme: "+d+0", error: .invalidLexeme(lexeme: "+d+0")),
  (lexeme: "+d+1", error: .invalidLexeme(lexeme: "+d+1")),
  (lexeme: "+d+9", error: .invalidLexeme(lexeme: "+d+9")),
  (lexeme: "0d+", error: .invalidLexeme(lexeme: "0d+")),
  (lexeme: "1d+", error: .invalidLexeme(lexeme: "1d+")),
  (lexeme: "9d+", error: .invalidLexeme(lexeme: "9d+")),
  (lexeme: "-0d+", error: .invalidLexeme(lexeme: "-0d+")),
  (lexeme: "-1d+", error: .invalidLexeme(lexeme: "-1d+")),
  (lexeme: "-9d+", error: .invalidLexeme(lexeme: "-9d+")),
  (lexeme: "+0d+", error: .invalidLexeme(lexeme: "+0d+")),
  (lexeme: "+1d+", error: .invalidLexeme(lexeme: "+1d+")),
  (lexeme: "+9d+", error: .invalidLexeme(lexeme: "+9d+")),
  (lexeme: "0d0\n1d1", error: .invalidLexeme(lexeme: "0d0\n1d1")),
  (lexeme: "=", error: .invalidLexeme(lexeme: "=")),
  (lexeme: "[", error: .invalidLexeme(lexeme: "[")),
  (lexeme: "]", error: .invalidLexeme(lexeme: "]")),
  (lexeme: "{", error: .invalidLexeme(lexeme: "{")),
  (lexeme: "}", error: .invalidLexeme(lexeme: "}")),
  (lexeme: "<", error: .invalidLexeme(lexeme: "<")),
  (lexeme: ">", error: .invalidLexeme(lexeme: ">")),
  (lexeme: ".", error: .invalidLexeme(lexeme: ".")),
  (lexeme: ",", error: .invalidLexeme(lexeme: ",")),
  (lexeme: "**", error: .invalidLexeme(lexeme: "**")),
  (lexeme: "&", error: .invalidLexeme(lexeme: "&")),
  (lexeme: "|", error: .invalidLexeme(lexeme: "|")),
  (lexeme: "!", error: .invalidLexeme(lexeme: "!")),
  (lexeme: "~", error: .invalidLexeme(lexeme: "~")),
  (lexeme: "..<", error: .invalidLexeme(lexeme: "..<")),
  (lexeme: "...", error: .invalidLexeme(lexeme: "...")),
  (lexeme: "<<", error: .invalidLexeme(lexeme: "<<")),
  (lexeme: ">>", error: .invalidLexeme(lexeme: ">>")),
  (lexeme: "%", error: .invalidLexeme(lexeme: "%")),
]
