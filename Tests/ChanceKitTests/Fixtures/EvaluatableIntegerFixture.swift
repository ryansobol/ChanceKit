@testable import ChanceKit

typealias EvaluatableIntegerFixture = (
  description: String,
  lexemes: [String],
  infixTokens: [Tokenable],
  postfixTokens: [Tokenable],
  value: Int
)

let evaluatableIntegerFixtures: [EvaluatableIntegerFixture] = [
  // MARK: A

  (
    description: "",
    lexemes: [],
    infixTokens: [],
    postfixTokens: [],
    value: 0
  ),
  (
    description: "42",
    lexemes: ["42"],
    infixTokens: [Constant(term: 42)],
    postfixTokens: [Constant(term: 42)],
    value: 42
  ),
  (
    description: String(Int.max),
    lexemes: [String(Int.max)],
    infixTokens: [Constant(term: Int.max)],
    postfixTokens: [Constant(term: Int.max)],
    value: Int.max
  ),
  (
    description: String(Int.min),
    lexemes: [String(Int.min)],
    infixTokens: [Constant(term: Int.min)],
    postfixTokens: [Constant(term: Int.min)],
    value: Int.min
  ),
  (
    description: "1d1",
    lexemes: ["1d1"],
    infixTokens: [Roll(times: 1, sides: 1)],
    postfixTokens: [Roll(times: 1, sides: 1)],
    value: 1
  ),
  (
    description: "-1d1",
    lexemes: ["-1d1"],
    infixTokens: [Roll(times: -1, sides: 1)],
    postfixTokens: [Roll(times: -1, sides: 1)],
    value: -1
  ),
  (
    description: "1d-1",
    lexemes: ["1d-1"],
    infixTokens: [Roll(times: 1, sides: -1)],
    postfixTokens: [Roll(times: 1, sides: -1)],
    value: -1
  ),
  (
    description: "-1d-1",
    lexemes: ["-1d-1"],
    infixTokens: [Roll(times: -1, sides: -1)],
    postfixTokens: [Roll(times: -1, sides: -1)],
    value: 1
  ),

  // MARK: A + B

  (
    description: "1 + 2",
    lexemes: ["1", "+", "2"],
    infixTokens: [Constant(term: 1), Operator.addition, Constant(term: 2)],
    postfixTokens: [Constant(term: 1), Constant(term: 2), Operator.addition],
    value: 3
  ),
  (
    description: "4 - 3",
    lexemes: ["4", "-", "3"],
    infixTokens: [Constant(term: 4), Operator.subtraction, Constant(term: 3)],
    postfixTokens: [Constant(term: 4), Constant(term: 3), Operator.subtraction],
    value: 1
  ),
  (
    description: "5 × 6",
    lexemes: ["5", "×", "6"],
    infixTokens: [Constant(term: 5), Operator.multiplication, Constant(term: 6)],
    postfixTokens: [Constant(term: 5), Constant(term: 6), Operator.multiplication],
    value: 30
  ),
  (
    description: "8 ÷ 7",
    lexemes: ["8", "÷", "7"],
    infixTokens: [Constant(term: 8), Operator.division, Constant(term: 7)],
    postfixTokens: [Constant(term: 8), Constant(term: 7), Operator.division],
    value: 1
  ),
  (
    description: "9 × 0",
    lexemes: ["9", "×", "0"],
    infixTokens: [Constant(term: 9), Operator.multiplication, Constant(term: 0)],
    postfixTokens: [Constant(term: 9), Constant(term: 0), Operator.multiplication],
    value: 0
  ),
  (
    description: "2 ÷ 1",
    lexemes: ["2", "÷", "1"],
    infixTokens: [Constant(term: 2), Operator.division, Constant(term: 1)],
    postfixTokens: [Constant(term: 2), Constant(term: 1), Operator.division],
    value: 2
  ),
  (
    description: "1d1 + 2",
    lexemes: ["1d1", "+", "2"],
    infixTokens: [Roll(times: 1, sides: 1), Operator.addition, Constant(term: 2)],
    postfixTokens: [Roll(times: 1, sides: 1), Constant(term: 2), Operator.addition],
    value: 3
  ),
  (
    description: "4 - 3d1",
    lexemes: ["4", "-", "3d1"],
    infixTokens: [Constant(term: 4), Operator.subtraction, Roll(times: 3, sides: 1)],
    postfixTokens: [Constant(term: 4), Roll(times: 3, sides: 1), Operator.subtraction],
    value: 1
  ),
  (
    description: "5d1 × 6d1",
    lexemes: ["5d1", "×", "6d1"],
    infixTokens: [Roll(times: 5, sides: 1), Operator.multiplication, Roll(times: 6, sides: 1)],
    postfixTokens: [
      Roll(times: 5, sides: 1),
      Roll(times: 6, sides: 1),
      Operator.multiplication,
    ],
    value: 30
  ),
  (
    description: "8d1 ÷ 7d1",
    lexemes: ["8d1", "÷", "7d1"],
    infixTokens: [Roll(times: 8, sides: 1), Operator.division, Roll(times: 7, sides: 1)],
    postfixTokens: [
      Roll(times: 8, sides: 1),
      Roll(times: 7, sides: 1),
      Operator.division,
    ],
    value: 1
  ),
  (
    description: "9 × 0d1",
    lexemes: ["9", "×", "0d1"],
    infixTokens: [Constant(term: 9), Operator.multiplication, Roll(times: 0, sides: 1)],
    postfixTokens: [Constant(term: 9), Roll(times: 0, sides: 1), Operator.multiplication],
    value: 0
  ),
  (
    description: "2 ÷ 1d1",
    lexemes: ["2", "÷", "1d1"],
    infixTokens: [Constant(term: 2), Operator.division, Roll(times: 1, sides: 1)],
    postfixTokens: [Constant(term: 2), Roll(times: 1, sides: 1), Operator.division],
    value: 2
  ),

  // MARK: A + B + C

  (
    description: "3 - 1 + 2",
    lexemes: ["3", "-", "1", "+", "2"],
    infixTokens: [
      Constant(term: 3),
      Operator.subtraction,
      Constant(term: 1),
      Operator.addition,
      Constant(term: 2),
    ],
    postfixTokens: [
      Constant(term: 3),
      Constant(term: 1),
      Operator.subtraction,
      Constant(term: 2),
      Operator.addition,
    ],
    value: 4
  ),
  (
    description: "5 ÷ 7 × 6",
    lexemes: ["5", "÷", "7", "×", "6"],
    infixTokens: [
      Constant(term: 5),
      Operator.division,
      Constant(term: 7),
      Operator.multiplication,
      Constant(term: 6),
    ],
    postfixTokens: [
      Constant(term: 5),
      Constant(term: 7),
      Operator.division,
      Constant(term: 6),
      Operator.multiplication,
    ],
    value: 0
  ),
  (
    description: "8 + 0 ÷ 9",
    lexemes: ["8", "+", "0", "÷", "9"],
    infixTokens: [
      Constant(term: 8),
      Operator.addition,
      Constant(term: 0),
      Operator.division,
      Constant(term: 9),
    ],
    postfixTokens: [
      Constant(term: 8),
      Constant(term: 0),
      Constant(term: 9),
      Operator.division,
      Operator.addition,
    ],
    value: 8
  ),
  (
    description: "2 × 4 - 1",
    lexemes: ["2", "×", "4", "-", "1"],
    infixTokens: [
      Constant(term: 2),
      Operator.multiplication,
      Constant(term: 4),
      Operator.subtraction,
      Constant(term: 1),
    ],
    postfixTokens: [
      Constant(term: 2),
      Constant(term: 4),
      Operator.multiplication,
      Constant(term: 1),
      Operator.subtraction,
    ],
    value: 7
  ),
  (
    description: "3d1 - 1 + 2",
    lexemes: ["3d1", "-", "1", "+", "2"],
    infixTokens: [
      Roll(times: 3, sides: 1),
      Operator.subtraction,
      Constant(term: 1),
      Operator.addition,
      Constant(term: 2),
    ],
    postfixTokens: [
      Roll(times: 3, sides: 1),
      Constant(term: 1),
      Operator.subtraction,
      Constant(term: 2),
      Operator.addition,
    ],
    value: 4
  ),
  (
    description: "5 ÷ 7d1 × 6",
    lexemes: ["5", "÷", "7d1", "×", "6"],
    infixTokens: [
      Constant(term: 5),
      Operator.division,
      Roll(times: 7, sides: 1),
      Operator.multiplication,
      Constant(term: 6),
    ],
    postfixTokens: [
      Constant(term: 5),
      Roll(times: 7, sides: 1),
      Operator.division,
      Constant(term: 6),
      Operator.multiplication,
    ],
    value: 0
  ),
  (
    description: "8 + 0 ÷ 9d1",
    lexemes: ["8", "+", "0", "÷", "9d1"],
    infixTokens: [
      Constant(term: 8),
      Operator.addition,
      Constant(term: 0),
      Operator.division,
      Roll(times: 9, sides: 1),
    ],
    postfixTokens: [
      Constant(term: 8),
      Constant(term: 0),
      Roll(times: 9, sides: 1),
      Operator.division,
      Operator.addition,
    ],
    value: 8
  ),
  (
    description: "2d1 × 4d1 - 1d1",
    lexemes: ["2d1", "×", "4d1", "-", "1d1"],
    infixTokens: [
      Roll(times: 2, sides: 1),
      Operator.multiplication,
      Roll(times: 4, sides: 1),
      Operator.subtraction,
      Roll(times: 1, sides: 1),
    ],
    postfixTokens: [
      Roll(times: 2, sides: 1),
      Roll(times: 4, sides: 1),
      Operator.multiplication,
      Roll(times: 1, sides: 1),
      Operator.subtraction,
    ],
    value: 7
  ),

  // MARK: A + B + C + D

  (
    description: "7 - 5 - 3 + 8",
    lexemes: ["7", "-", "5", "-", "3", "+", "8"],
    infixTokens: [
      Constant(term: 7),
      Operator.subtraction,
      Constant(term: 5),
      Operator.subtraction,
      Constant(term: 3),
      Operator.addition,
      Constant(term: 8),
    ],
    postfixTokens: [
      Constant(term: 7),
      Constant(term: 5),
      Operator.subtraction,
      Constant(term: 3),
      Operator.subtraction,
      Constant(term: 8),
      Operator.addition,
    ],
    value: 7
  ),
  (
    description: "6 ÷ 1 × 2 × 0",
    lexemes: ["6", "÷", "1", "×", "2", "×", "0"],
    infixTokens: [
      Constant(term: 6),
      Operator.division,
      Constant(term: 1),
      Operator.multiplication,
      Constant(term: 2),
      Operator.multiplication,
      Constant(term: 0),
    ],
    postfixTokens: [
      Constant(term: 6),
      Constant(term: 1),
      Operator.division,
      Constant(term: 2),
      Operator.multiplication,
      Constant(term: 0),
      Operator.multiplication,
    ],
    value: 0
  ),
  (
    description: "3 + 4 ÷ 2 - 7",
    lexemes: ["3", "+", "4", "÷", "2", "-", "7"],
    infixTokens: [
      Constant(term: 3),
      Operator.addition,
      Constant(term: 4),
      Operator.division,
      Constant(term: 2),
      Operator.subtraction,
      Constant(term: 7),
    ],
    postfixTokens: [
      Constant(term: 3),
      Constant(term: 4),
      Constant(term: 2),
      Operator.division,
      Operator.addition,
      Constant(term: 7),
      Operator.subtraction,
    ],
    value: -2
  ),
  (
    description: "8 - 9 × 5 ÷ 1",
    lexemes: ["8", "-", "9", "×", "5", "÷", "1"],
    infixTokens: [
      Constant(term: 8),
      Operator.subtraction,
      Constant(term: 9),
      Operator.multiplication,
      Constant(term: 5),
      Operator.division,
      Constant(term: 1),
    ],
    postfixTokens: [
      Constant(term: 8),
      Constant(term: 9),
      Constant(term: 5),
      Operator.multiplication,
      Constant(term: 1),
      Operator.division,
      Operator.subtraction,
    ],
    value: -37
  ),
  (
    description: "4 × 1 ÷ 6 + 0",
    lexemes: ["4", "×", "1", "÷", "6", "+", "0"],
    infixTokens: [
      Constant(term: 4),
      Operator.multiplication,
      Constant(term: 1),
      Operator.division,
      Constant(term: 6),
      Operator.addition,
      Constant(term: 0),
    ],
    postfixTokens: [
      Constant(term: 4),
      Constant(term: 1),
      Operator.multiplication,
      Constant(term: 6),
      Operator.division,
      Constant(term: 0),
      Operator.addition,
    ],
    value: 0
  ),
  (
    description: "0 ÷ 5 + 4 × 7",
    lexemes: ["0", "÷", "5", "+", "4", "×", "7"],
    infixTokens: [
      Constant(term: 0),
      Operator.division,
      Constant(term: 5),
      Operator.addition,
      Constant(term: 4),
      Operator.multiplication,
      Constant(term: 7),
    ],
    postfixTokens: [
      Constant(term: 0),
      Constant(term: 5),
      Operator.division,
      Constant(term: 4),
      Constant(term: 7),
      Operator.multiplication,
      Operator.addition,
    ],
    value: 28
  ),
  (
    description: "7d1 - 5 - 3 + 8",
    lexemes: ["7d1", "-", "5", "-", "3", "+", "8"],
    infixTokens: [
      Roll(times: 7, sides: 1),
      Operator.subtraction,
      Constant(term: 5),
      Operator.subtraction,
      Constant(term: 3),
      Operator.addition,
      Constant(term: 8),
    ],
    postfixTokens: [
      Roll(times: 7, sides: 1),
      Constant(term: 5),
      Operator.subtraction,
      Constant(term: 3),
      Operator.subtraction,
      Constant(term: 8),
      Operator.addition,
    ],
    value: 7
  ),
  (
    description: "6 ÷ 1d1 × 2 × 0",
    lexemes: ["6", "÷", "1d1", "×", "2", "×", "0"],
    infixTokens: [
      Constant(term: 6),
      Operator.division,
      Roll(times: 1, sides: 1),
      Operator.multiplication,
      Constant(term: 2),
      Operator.multiplication,
      Constant(term: 0),
    ],
    postfixTokens: [
      Constant(term: 6),
      Roll(times: 1, sides: 1),
      Operator.division,
      Constant(term: 2),
      Operator.multiplication,
      Constant(term: 0),
      Operator.multiplication,
    ],
    value: 0
  ),
  (
    description: "3 + 4 ÷ 2d1 - 7",
    lexemes: ["3", "+", "4", "÷", "2d1", "-", "7"],
    infixTokens: [
      Constant(term: 3),
      Operator.addition,
      Constant(term: 4),
      Operator.division,
      Roll(times: 2, sides: 1),
      Operator.subtraction,
      Constant(term: 7),
    ],
    postfixTokens: [
      Constant(term: 3),
      Constant(term: 4),
      Roll(times: 2, sides: 1),
      Operator.division,
      Operator.addition,
      Constant(term: 7),
      Operator.subtraction,
    ],
    value: -2
  ),
  (
    description: "8 - 9 × 5 ÷ 1d1",
    lexemes: ["8", "-", "9", "×", "5", "÷", "1d1"],
    infixTokens: [
      Constant(term: 8),
      Operator.subtraction,
      Constant(term: 9),
      Operator.multiplication,
      Constant(term: 5),
      Operator.division,
      Roll(times: 1, sides: 1),
    ],
    postfixTokens: [
      Constant(term: 8),
      Constant(term: 9),
      Constant(term: 5),
      Operator.multiplication,
      Roll(times: 1, sides: 1),
      Operator.division,
      Operator.subtraction,
    ],
    value: -37
  ),
  (
    description: "4d1 × 1 ÷ 6d1 + 0",
    lexemes: ["4d1", "×", "1", "÷", "6d1", "+", "0"],
    infixTokens: [
      Roll(times: 4, sides: 1),
      Operator.multiplication,
      Constant(term: 1),
      Operator.division,
      Roll(times: 6, sides: 1),
      Operator.addition,
      Constant(term: 0),
    ],
    postfixTokens: [
      Roll(times: 4, sides: 1),
      Constant(term: 1),
      Operator.multiplication,
      Roll(times: 6, sides: 1),
      Operator.division,
      Constant(term: 0),
      Operator.addition,
    ],
    value: 0
  ),
  (
    description: "0 ÷ 5d1 + 4 × 7d1",
    lexemes: ["0", "÷", "5d1", "+", "4", "×", "7d1"],
    infixTokens: [
      Constant(term: 0),
      Operator.division,
      Roll(times: 5, sides: 1),
      Operator.addition,
      Constant(term: 4),
      Operator.multiplication,
      Roll(times: 7, sides: 1),
    ],
    postfixTokens: [
      Constant(term: 0),
      Roll(times: 5, sides: 1),
      Operator.division,
      Constant(term: 4),
      Roll(times: 7, sides: 1),
      Operator.multiplication,
      Operator.addition,
    ],
    value: 28
  ),

  // MARK: (A)

  (
    description: "()",
    lexemes: ["(", ")"],
    infixTokens: [Parenthesis.open, Parenthesis.close],
    postfixTokens: [],
    value: 0
  ),
  (
    description: "(42)",
    lexemes: ["(", "42", ")"],
    infixTokens: [Parenthesis.open, Constant(term: 42), Parenthesis.close],
    postfixTokens: [Constant(term: 42)],
    value: 42
  ),
  (
    description: "(\(Int.max))",
    lexemes: ["(", String(Int.max), ")"],
    infixTokens: [Parenthesis.open, Constant(term: Int.max), Parenthesis.close],
    postfixTokens: [Constant(term: Int.max)],
    value: Int.max
  ),
  (
    description: "(\(Int.min))",
    lexemes: ["(", String(Int.min), ")"],
    infixTokens: [Parenthesis.open, Constant(term: Int.min), Parenthesis.close],
    postfixTokens: [Constant(term: Int.min)],
    value: Int.min
  ),
  (
    description: "(1d1)",
    lexemes: ["(", "1d1", ")"],
    infixTokens: [Parenthesis.open, Roll(times: 1, sides: 1), Parenthesis.close],
    postfixTokens: [Roll(times: 1, sides: 1)],
    value: 1
  ),
  (
    description: "(-1d1)",
    lexemes: ["(", "-1d1", ")"],
    infixTokens: [Parenthesis.open, Roll(times: -1, sides: 1), Parenthesis.close],
    postfixTokens: [Roll(times: -1, sides: 1)],
    value: -1
  ),
  (
    description: "(1d-1)",
    lexemes: ["(", "1d-1", ")"],
    infixTokens: [Parenthesis.open, Roll(times: 1, sides: -1), Parenthesis.close],
    postfixTokens: [Roll(times: 1, sides: -1)],
    value: -1
  ),
  (
    description: "(-1d-1)",
    lexemes: ["(", "-1d-1", ")"],
    infixTokens: [Parenthesis.open, Roll(times: -1, sides: -1), Parenthesis.close],
    postfixTokens: [Roll(times: -1, sides: -1)],
    value: 1
  ),

  // MARK: (A + B)

  (
    description: "(2 + 3)",
    lexemes: ["(", "2", "+", "3", ")"],
    infixTokens: [
      Parenthesis.open,
      Constant(term: 2),
      Operator.addition,
      Constant(term: 3),
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 2),
      Constant(term: 3),
      Operator.addition,
    ],
    value: 5
  ),
  (
    description: "(5 - 4)",
    lexemes: ["(", "5", "-", "4", ")"],
    infixTokens: [
      Parenthesis.open,
      Constant(term: 5),
      Operator.subtraction,
      Constant(term: 4),
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 5),
      Constant(term: 4),
      Operator.subtraction,
    ],
    value: 1
  ),
  (
    description: "(6 × 7)",
    lexemes: ["(", "6", "×", "7", ")"],
    infixTokens: [
      Parenthesis.open,
      Constant(term: 6),
      Operator.multiplication,
      Constant(term: 7),
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 6),
      Constant(term: 7),
      Operator.multiplication,
    ],
    value: 42
  ),
  (
    description: "(9 ÷ 8)",
    lexemes: ["(", "9", "÷", "8", ")"],
    infixTokens: [
      Parenthesis.open,
      Constant(term: 9),
      Operator.division,
      Constant(term: 8),
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 9),
      Constant(term: 8),
      Operator.division,
    ],
    value: 1
  ),
  (
    description: "(0 × 1)",
    lexemes: ["(", "0", "×", "1", ")"],
    infixTokens: [
      Parenthesis.open,
      Constant(term: 0),
      Operator.multiplication,
      Constant(term: 1),
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 0),
      Constant(term: 1),
      Operator.multiplication,
    ],
    value: 0
  ),
  (
    description: "(3 ÷ 2)",
    lexemes: ["(", "3", "÷", "2", ")"],
    infixTokens: [
      Parenthesis.open,
      Constant(term: 3),
      Operator.division,
      Constant(term: 2),
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 3),
      Constant(term: 2),
      Operator.division,
    ],
    value: 1
  ),
  (
    description: "(2d1 + 3)",
    lexemes: ["(", "2d1", "+", "3", ")"],
    infixTokens: [
      Parenthesis.open,
      Roll(times: 2, sides: 1),
      Operator.addition,
      Constant(term: 3),
      Parenthesis.close,
    ],
    postfixTokens: [
      Roll(times: 2, sides: 1),
      Constant(term: 3),
      Operator.addition,
    ],
    value: 5
  ),
  (
    description: "(5 - 4d1)",
    lexemes: ["(", "5", "-", "4d1", ")"],
    infixTokens: [
      Parenthesis.open,
      Constant(term: 5),
      Operator.subtraction,
      Roll(times: 4, sides: 1),
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 5),
      Roll(times: 4, sides: 1),
      Operator.subtraction,
    ],
    value: 1
  ),
  (
    description: "(6d1 × 7d1)",
    lexemes: ["(", "6d1", "×", "7d1", ")"],
    infixTokens: [
      Parenthesis.open,
      Roll(times: 6, sides: 1),
      Operator.multiplication,
      Roll(times: 7, sides: 1),
      Parenthesis.close,
    ],
    postfixTokens: [
      Roll(times: 6, sides: 1),
      Roll(times: 7, sides: 1),
      Operator.multiplication,
    ],
    value: 42
  ),
  (
    description: "(9d1 ÷ 8d1)",
    lexemes: ["(", "9d1", "÷", "8d1", ")"],
    infixTokens: [
      Parenthesis.open,
      Roll(times: 9, sides: 1),
      Operator.division,
      Roll(times: 8, sides: 1),
      Parenthesis.close,
    ],
    postfixTokens: [
      Roll(times: 9, sides: 1),
      Roll(times: 8, sides: 1),
      Operator.division,
    ],
    value: 1
  ),
  (
    description: "(0d1 × 1)",
    lexemes: ["(", "0d1", "×", "1", ")"],
    infixTokens: [
      Parenthesis.open,
      Roll(times: 0, sides: 1),
      Operator.multiplication,
      Constant(term: 1),
      Parenthesis.close,
    ],
    postfixTokens: [
      Roll(times: 0, sides: 1),
      Constant(term: 1),
      Operator.multiplication,
    ],
    value: 0
  ),
  (
    description: "(3 ÷ 2d1)",
    lexemes: ["(", "3", "÷", "2d1", ")"],
    infixTokens: [
      Parenthesis.open,
      Constant(term: 3),
      Operator.division,
      Roll(times: 2, sides: 1),
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 3),
      Roll(times: 2, sides: 1),
      Operator.division,
    ],
    value: 1
  ),

  // MARK: ((A + B))

  (
    description: "((2 + 3))",
    lexemes: ["(", "(", "2", "+", "3", ")", ")"],
    infixTokens: [
      Parenthesis.open,
      Parenthesis.open,
      Constant(term: 2),
      Operator.addition,
      Constant(term: 3),
      Parenthesis.close,
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 2),
      Constant(term: 3),
      Operator.addition,
    ],
    value: 5
  ),
  (
    description: "((5 - 4))",
    lexemes: ["(", "(", "5", "-", "4", ")", ")"],
    infixTokens: [
      Parenthesis.open,
      Parenthesis.open,
      Constant(term: 5),
      Operator.subtraction,
      Constant(term: 4),
      Parenthesis.close,
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 5),
      Constant(term: 4),
      Operator.subtraction,
    ],
    value: 1
  ),
  (
    description: "((6 × 7))",
    lexemes: ["(", "(", "6", "×", "7", ")", ")"],
    infixTokens: [
      Parenthesis.open,
      Parenthesis.open,
      Constant(term: 6),
      Operator.multiplication,
      Constant(term: 7),
      Parenthesis.close,
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 6),
      Constant(term: 7),
      Operator.multiplication,
    ],
    value: 42
  ),
  (
    description: "((9 ÷ 8))",
    lexemes: ["(", "(", "9", "÷", "8", ")", ")"],
    infixTokens: [
      Parenthesis.open,
      Parenthesis.open,
      Constant(term: 9),
      Operator.division,
      Constant(term: 8),
      Parenthesis.close,
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 9),
      Constant(term: 8),
      Operator.division,
    ],
    value: 1
  ),
  (
    description: "((0 × 1))",
    lexemes: ["(", "(", "0", "×", "1", ")", ")"],
    infixTokens: [
      Parenthesis.open,
      Parenthesis.open,
      Constant(term: 0),
      Operator.multiplication,
      Constant(term: 1),
      Parenthesis.close,
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 0),
      Constant(term: 1),
      Operator.multiplication,
    ],
    value: 0
  ),
  (
    description: "((3 ÷ 2))",
    lexemes: ["(", "(", "3", "÷", "2", ")", ")"],
    infixTokens: [
      Parenthesis.open,
      Parenthesis.open,
      Constant(term: 3),
      Operator.division,
      Constant(term: 2),
      Parenthesis.close,
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 3),
      Constant(term: 2),
      Operator.division,
    ],
    value: 1
  ),
  (
    description: "((2d1 + 3))",
    lexemes: ["(", "(", "2d1", "+", "3", ")", ")"],
    infixTokens: [
      Parenthesis.open,
      Parenthesis.open,
      Roll(times: 2, sides: 1),
      Operator.addition,
      Constant(term: 3),
      Parenthesis.close,
      Parenthesis.close,
    ],
    postfixTokens: [
      Roll(times: 2, sides: 1),
      Constant(term: 3),
      Operator.addition,
    ],
    value: 5
  ),
  (
    description: "((5 - 4d1))",
    lexemes: ["(", "(", "5", "-", "4d1", ")", ")"],
    infixTokens: [
      Parenthesis.open,
      Parenthesis.open,
      Constant(term: 5),
      Operator.subtraction,
      Roll(times: 4, sides: 1),
      Parenthesis.close,
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 5),
      Roll(times: 4, sides: 1),
      Operator.subtraction,
    ],
    value: 1
  ),
  (
    description: "((6d1 × 7d1))",
    lexemes: ["(", "(", "6d1", "×", "7d1", ")", ")"],
    infixTokens: [
      Parenthesis.open,
      Parenthesis.open,
      Roll(times: 6, sides: 1),
      Operator.multiplication,
      Roll(times: 7, sides: 1),
      Parenthesis.close,
      Parenthesis.close,
    ],
    postfixTokens: [
      Roll(times: 6, sides: 1),
      Roll(times: 7, sides: 1),
      Operator.multiplication,
    ],
    value: 42
  ),
  (
    description: "((9d1 ÷ 8d1))",
    lexemes: ["(", "(", "9d1", "÷", "8d1", ")", ")"],
    infixTokens: [
      Parenthesis.open,
      Parenthesis.open,
      Roll(times: 9, sides: 1),
      Operator.division,
      Roll(times: 8, sides: 1),
      Parenthesis.close,
      Parenthesis.close,
    ],
    postfixTokens: [
      Roll(times: 9, sides: 1),
      Roll(times: 8, sides: 1),
      Operator.division,
    ],
    value: 1
  ),
  (
    description: "((0d1 × 1))",
    lexemes: ["(", "(", "0d1", "×", "1", ")", ")"],
    infixTokens: [
      Parenthesis.open,
      Parenthesis.open,
      Roll(times: 0, sides: 1),
      Operator.multiplication,
      Constant(term: 1),
      Parenthesis.close,
      Parenthesis.close,
    ],
    postfixTokens: [
      Roll(times: 0, sides: 1),
      Constant(term: 1),
      Operator.multiplication,
    ],
    value: 0
  ),
  (
    description: "((3 ÷ 2d1))",
    lexemes: ["(", "(", "3", "÷", "2d1", ")", ")"],
    infixTokens: [
      Parenthesis.open,
      Parenthesis.open,
      Constant(term: 3),
      Operator.division,
      Roll(times: 2, sides: 1),
      Parenthesis.close,
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 3),
      Roll(times: 2, sides: 1),
      Operator.division,
    ],
    value: 1
  ),

  // MARK: (A + B) + C

  (
    description: "(5 - 4) + 6",
    lexemes: ["(", "5", "-", "4", ")", "+", "6"],
    infixTokens: [
      Parenthesis.open,
      Constant(term: 5),
      Operator.subtraction,
      Constant(term: 4),
      Parenthesis.close,
      Operator.addition,
      Constant(term: 6),
    ],
    postfixTokens: [
      Constant(term: 5),
      Constant(term: 4),
      Operator.subtraction,
      Constant(term: 6),
      Operator.addition,
    ],
    value: 7
  ),
  (
    description: "7 - (9 + 8)",
    lexemes: ["7", "-", "(", "9", "+", "8", ")"],
    infixTokens: [
      Constant(term: 7),
      Operator.subtraction,
      Parenthesis.open,
      Constant(term: 9),
      Operator.addition,
      Constant(term: 8),
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 7),
      Constant(term: 9),
      Constant(term: 8),
      Operator.addition,
      Operator.subtraction,
    ],
    value: -10
  ),
  (
    description: "(3 ÷ 1) - 0",
    lexemes: ["(", "3", "÷", "1", ")", "-", "0"],
    infixTokens: [
      Parenthesis.open,
      Constant(term: 3),
      Operator.division,
      Constant(term: 1),
      Parenthesis.close,
      Operator.subtraction,
      Constant(term: 0),
    ],
    postfixTokens: [
      Constant(term: 3),
      Constant(term: 1),
      Operator.division,
      Constant(term: 0),
      Operator.subtraction,
    ],
    value: 3
  ),
  (
    description: "4 ÷ (2 - 5)",
    lexemes: ["4", "÷", "(", "2", "-", "5", ")"],
    infixTokens: [
      Constant(term: 4),
      Operator.division,
      Parenthesis.open,
      Constant(term: 2),
      Operator.subtraction,
      Constant(term: 5),
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 4),
      Constant(term: 2),
      Constant(term: 5),
      Operator.subtraction,
      Operator.division,
    ],
    value: -1
  ),
  (
    description: "(2 + 8) × 7",
    lexemes: ["(", "2", "+", "8", ")", "×", "7"],
    infixTokens: [
      Parenthesis.open,
      Constant(term: 2),
      Operator.addition,
      Constant(term: 8),
      Parenthesis.close,
      Operator.multiplication,
      Constant(term: 7),
    ],
    postfixTokens: [
      Constant(term: 2),
      Constant(term: 8),
      Operator.addition,
      Constant(term: 7),
      Operator.multiplication,
    ],
    value: 70
  ),
  (
    description: "9 + (0 × 1)",
    lexemes: ["9", "+", "(", "0", "×", "1", ")"],
    infixTokens: [
      Constant(term: 9),
      Operator.addition,
      Parenthesis.open,
      Constant(term: 0),
      Operator.multiplication,
      Constant(term: 1),
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 9),
      Constant(term: 0),
      Constant(term: 1),
      Operator.multiplication,
      Operator.addition,
    ],
    value: 9
  ),
  (
    description: "(1 × 3) ÷ 4",
    lexemes: ["(", "1", "×", "3", ")", "÷", "4"],
    infixTokens: [
      Parenthesis.open,
      Constant(term: 1),
      Operator.multiplication,
      Constant(term: 3),
      Parenthesis.close,
      Operator.division,
      Constant(term: 4),
    ],
    postfixTokens: [
      Constant(term: 1),
      Constant(term: 3),
      Operator.multiplication,
      Constant(term: 4),
      Operator.division,
    ],
    value: 0
  ),
  (
    description: "6 × (7 ÷ 5)",
    lexemes: ["6", "×", "(", "7", "÷", "5", ")"],
    infixTokens: [
      Constant(term: 6),
      Operator.multiplication,
      Parenthesis.open,
      Constant(term: 7),
      Operator.division,
      Constant(term: 5),
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 6),
      Constant(term: 7),
      Constant(term: 5),
      Operator.division,
      Operator.multiplication,
    ],
    value: 6
  ),
  (
    description: "(5d1 - 4) + 6",
    lexemes: ["(", "5d1", "-", "4", ")", "+", "6"],
    infixTokens: [
      Parenthesis.open,
      Roll(times: 5, sides: 1),
      Operator.subtraction,
      Constant(term: 4),
      Parenthesis.close,
      Operator.addition,
      Constant(term: 6),
    ],
    postfixTokens: [
      Roll(times: 5, sides: 1),
      Constant(term: 4),
      Operator.subtraction,
      Constant(term: 6),
      Operator.addition,
    ],
    value: 7
  ),
  (
    description: "7 - (9d1 + 8)",
    lexemes: ["7", "-", "(", "9d1", "+", "8", ")"],
    infixTokens: [
      Constant(term: 7),
      Operator.subtraction,
      Parenthesis.open,
      Roll(times: 9, sides: 1),
      Operator.addition,
      Constant(term: 8),
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 7),
      Roll(times: 9, sides: 1),
      Constant(term: 8),
      Operator.addition,
      Operator.subtraction,
    ],
    value: -10
  ),
  (
    description: "(3 ÷ 1) - 0d1",
    lexemes: ["(", "3", "÷", "1", ")", "-", "0d1"],
    infixTokens: [
      Parenthesis.open,
      Constant(term: 3),
      Operator.division,
      Constant(term: 1),
      Parenthesis.close,
      Operator.subtraction,
      Roll(times: 0, sides: 1),
    ],
    postfixTokens: [
      Constant(term: 3),
      Constant(term: 1),
      Operator.division,
      Roll(times: 0, sides: 1),
      Operator.subtraction,
    ],
    value: 3
  ),
  (
    description: "4d1 ÷ (2d1 - 5)",
    lexemes: ["4d1", "÷", "(", "2d1", "-", "5", ")"],
    infixTokens: [
      Roll(times: 4, sides: 1),
      Operator.division,
      Parenthesis.open,
      Roll(times: 2, sides: 1),
      Operator.subtraction,
      Constant(term: 5),
      Parenthesis.close,
    ],
    postfixTokens: [
      Roll(times: 4, sides: 1),
      Roll(times: 2, sides: 1),
      Constant(term: 5),
      Operator.subtraction,
      Operator.division,
    ],
    value: -1
  ),
  (
    description: "(2 + 8d1) × 7d1",
    lexemes: ["(", "2", "+", "8d1", ")", "×", "7d1"],
    infixTokens: [
      Parenthesis.open,
      Constant(term: 2),
      Operator.addition,
      Roll(times: 8, sides: 1),
      Parenthesis.close,
      Operator.multiplication,
      Roll(times: 7, sides: 1),
    ],
    postfixTokens: [
      Constant(term: 2),
      Roll(times: 8, sides: 1),
      Operator.addition,
      Roll(times: 7, sides: 1),
      Operator.multiplication,
    ],
    value: 70
  ),
  (
    description: "9d1 + (0d1 × 1d1)",
    lexemes: ["9d1", "+", "(", "0d1", "×", "1d1", ")"],
    infixTokens: [
      Roll(times: 9, sides: 1),
      Operator.addition,
      Parenthesis.open,
      Roll(times: 0, sides: 1),
      Operator.multiplication,
      Roll(times: 1, sides: 1),
      Parenthesis.close,
    ],
    postfixTokens: [
      Roll(times: 9, sides: 1),
      Roll(times: 0, sides: 1),
      Roll(times: 1, sides: 1),
      Operator.multiplication,
      Operator.addition,
    ],
    value: 9
  ),
  (
    description: "(1 × 3d1) ÷ 4",
    lexemes: ["(", "1", "×", "3d1", ")", "÷", "4"],
    infixTokens: [
      Parenthesis.open,
      Constant(term: 1),
      Operator.multiplication,
      Roll(times: 3, sides: 1),
      Parenthesis.close,
      Operator.division,
      Constant(term: 4),
    ],
    postfixTokens: [
      Constant(term: 1),
      Roll(times: 3, sides: 1),
      Operator.multiplication,
      Constant(term: 4),
      Operator.division,
    ],
    value: 0
  ),
  (
    description: "6d1 × (7 ÷ 5d1)",
    lexemes: ["6d1", "×", "(", "7", "÷", "5d1", ")"],
    infixTokens: [
      Roll(times: 6, sides: 1),
      Operator.multiplication,
      Parenthesis.open,
      Constant(term: 7),
      Operator.division,
      Roll(times: 5, sides: 1),
      Parenthesis.close,
    ],
    postfixTokens: [
      Roll(times: 6, sides: 1),
      Constant(term: 7),
      Roll(times: 5, sides: 1),
      Operator.division,
      Operator.multiplication,
    ],
    value: 6
  ),

  // MARK: ((A + B) + C)

  (
    description: "((5 - 4) + 6)",
    lexemes: ["(", "(", "5", "-", "4", ")", "+", "6", ")"],
    infixTokens: [
      Parenthesis.open,
      Parenthesis.open,
      Constant(term: 5),
      Operator.subtraction,
      Constant(term: 4),
      Parenthesis.close,
      Operator.addition,
      Constant(term: 6),
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 5),
      Constant(term: 4),
      Operator.subtraction,
      Constant(term: 6),
      Operator.addition,
    ],
    value: 7
  ),
  (
    description: "(7 - (9 + 8))",
    lexemes: ["(", "7", "-", "(", "9", "+", "8", ")", ")"],
    infixTokens: [
      Parenthesis.open,
      Constant(term: 7),
      Operator.subtraction,
      Parenthesis.open,
      Constant(term: 9),
      Operator.addition,
      Constant(term: 8),
      Parenthesis.close,
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 7),
      Constant(term: 9),
      Constant(term: 8),
      Operator.addition,
      Operator.subtraction,
    ],
    value: -10
  ),
  (
    description: "((3 ÷ 1) - 0)",
    lexemes: ["(", "(", "3", "÷", "1", ")", "-", "0", ")"],
    infixTokens: [
      Parenthesis.open,
      Parenthesis.open,
      Constant(term: 3),
      Operator.division,
      Constant(term: 1),
      Parenthesis.close,
      Operator.subtraction,
      Constant(term: 0),
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 3),
      Constant(term: 1),
      Operator.division,
      Constant(term: 0),
      Operator.subtraction,
    ],
    value: 3
  ),
  (
    description: "(4 ÷ (2 - 5))",
    lexemes: ["(", "4", "÷", "(", "2", "-", "5", ")", ")"],
    infixTokens: [
      Parenthesis.open,
      Constant(term: 4),
      Operator.division,
      Parenthesis.open,
      Constant(term: 2),
      Operator.subtraction,
      Constant(term: 5),
      Parenthesis.close,
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 4),
      Constant(term: 2),
      Constant(term: 5),
      Operator.subtraction,
      Operator.division,
    ],
    value: -1
  ),
  (
    description: "((2 + 8) × 7)",
    lexemes: ["(", "(", "2", "+", "8", ")", "×", "7", ")"],
    infixTokens: [
      Parenthesis.open,
      Parenthesis.open,
      Constant(term: 2),
      Operator.addition,
      Constant(term: 8),
      Parenthesis.close,
      Operator.multiplication,
      Constant(term: 7),
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 2),
      Constant(term: 8),
      Operator.addition,
      Constant(term: 7),
      Operator.multiplication,
    ],
    value: 70
  ),
  (
    description: "(9 + (0 × 1))",
    lexemes: ["(", "9", "+", "(", "0", "×", "1", ")", ")"],
    infixTokens: [
      Parenthesis.open,
      Constant(term: 9),
      Operator.addition,
      Parenthesis.open,
      Constant(term: 0),
      Operator.multiplication,
      Constant(term: 1),
      Parenthesis.close,
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 9),
      Constant(term: 0),
      Constant(term: 1),
      Operator.multiplication,
      Operator.addition,
    ],
    value: 9
  ),
  (
    description: "((1 × 3) ÷ 4)",
    lexemes: ["(", "(", "1", "×", "3", ")", "÷", "4", ")"],
    infixTokens: [
      Parenthesis.open,
      Parenthesis.open,
      Constant(term: 1),
      Operator.multiplication,
      Constant(term: 3),
      Parenthesis.close,
      Operator.division,
      Constant(term: 4),
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 1),
      Constant(term: 3),
      Operator.multiplication,
      Constant(term: 4),
      Operator.division,
    ],
    value: 0
  ),
  (
    description: "(6 × (7 ÷ 5))",
    lexemes: ["(", "6", "×", "(", "7", "÷", "5", ")", ")"],
    infixTokens: [
      Parenthesis.open,
      Constant(term: 6),
      Operator.multiplication,
      Parenthesis.open,
      Constant(term: 7),
      Operator.division,
      Constant(term: 5),
      Parenthesis.close,
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 6),
      Constant(term: 7),
      Constant(term: 5),
      Operator.division,
      Operator.multiplication,
    ],
    value: 6
  ),
  (
    description: "((5d1 - 4) + 6)",
    lexemes: ["(", "(", "5d1", "-", "4", ")", "+", "6", ")"],
    infixTokens: [
      Parenthesis.open,
      Parenthesis.open,
      Roll(times: 5, sides: 1),
      Operator.subtraction,
      Constant(term: 4),
      Parenthesis.close,
      Operator.addition,
      Constant(term: 6),
      Parenthesis.close,
    ],
    postfixTokens: [
      Roll(times: 5, sides: 1),
      Constant(term: 4),
      Operator.subtraction,
      Constant(term: 6),
      Operator.addition,
    ],
    value: 7
  ),
  (
    description: "(7 - (9d1 + 8))",
    lexemes: ["(", "7", "-", "(", "9d1", "+", "8", ")", ")"],
    infixTokens: [
      Parenthesis.open,
      Constant(term: 7),
      Operator.subtraction,
      Parenthesis.open,
      Roll(times: 9, sides: 1),
      Operator.addition,
      Constant(term: 8),
      Parenthesis.close,
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 7),
      Roll(times: 9, sides: 1),
      Constant(term: 8),
      Operator.addition,
      Operator.subtraction,
    ],
    value: -10
  ),
  (
    description: "((3 ÷ 1) - 0d1)",
    lexemes: ["(", "(", "3", "÷", "1", ")", "-", "0d1", ")"],
    infixTokens: [
      Parenthesis.open,
      Parenthesis.open,
      Constant(term: 3),
      Operator.division,
      Constant(term: 1),
      Parenthesis.close,
      Operator.subtraction,
      Roll(times: 0, sides: 1),
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 3),
      Constant(term: 1),
      Operator.division,
      Roll(times: 0, sides: 1),
      Operator.subtraction,
    ],
    value: 3
  ),
  (
    description: "(4d1 ÷ (2d1 - 5))",
    lexemes: ["(", "4d1", "÷", "(", "2d1", "-", "5", ")", ")"],
    infixTokens: [
      Parenthesis.open,
      Roll(times: 4, sides: 1),
      Operator.division,
      Parenthesis.open,
      Roll(times: 2, sides: 1),
      Operator.subtraction,
      Constant(term: 5),
      Parenthesis.close,
      Parenthesis.close,
    ],
    postfixTokens: [
      Roll(times: 4, sides: 1),
      Roll(times: 2, sides: 1),
      Constant(term: 5),
      Operator.subtraction,
      Operator.division,
    ],
    value: -1
  ),
  (
    description: "((2 + 8d1) × 7d1)",
    lexemes: ["(", "(", "2", "+", "8d1", ")", "×", "7d1", ")"],
    infixTokens: [
      Parenthesis.open,
      Parenthesis.open,
      Constant(term: 2),
      Operator.addition,
      Roll(times: 8, sides: 1),
      Parenthesis.close,
      Operator.multiplication,
      Roll(times: 7, sides: 1),
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 2),
      Roll(times: 8, sides: 1),
      Operator.addition,
      Roll(times: 7, sides: 1),
      Operator.multiplication,
    ],
    value: 70
  ),
  (
    description: "(9d1 + (0d1 × 1d1))",
    lexemes: ["(", "9d1", "+", "(", "0d1", "×", "1d1", ")", ")"],
    infixTokens: [
      Parenthesis.open,
      Roll(times: 9, sides: 1),
      Operator.addition,
      Parenthesis.open,
      Roll(times: 0, sides: 1),
      Operator.multiplication,
      Roll(times: 1, sides: 1),
      Parenthesis.close,
      Parenthesis.close,
    ],
    postfixTokens: [
      Roll(times: 9, sides: 1),
      Roll(times: 0, sides: 1),
      Roll(times: 1, sides: 1),
      Operator.multiplication,
      Operator.addition,
    ],
    value: 9
  ),
  (
    description: "((1 × 3d1) ÷ 4)",
    lexemes: ["(", "(", "1", "×", "3d1", ")", "÷", "4", ")"],
    infixTokens: [
      Parenthesis.open,
      Parenthesis.open,
      Constant(term: 1),
      Operator.multiplication,
      Roll(times: 3, sides: 1),
      Parenthesis.close,
      Operator.division,
      Constant(term: 4),
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 1),
      Roll(times: 3, sides: 1),
      Operator.multiplication,
      Constant(term: 4),
      Operator.division,
    ],
    value: 0
  ),
  (
    description: "(6d1 × (7 ÷ 5d1))",
    lexemes: ["(", "6d1", "×", "(", "7", "÷", "5d1", ")", ")"],
    infixTokens: [
      Parenthesis.open,
      Roll(times: 6, sides: 1),
      Operator.multiplication,
      Parenthesis.open,
      Constant(term: 7),
      Operator.division,
      Roll(times: 5, sides: 1),
      Parenthesis.close,
      Parenthesis.close,
    ],
    postfixTokens: [
      Roll(times: 6, sides: 1),
      Constant(term: 7),
      Roll(times: 5, sides: 1),
      Operator.division,
      Operator.multiplication,
    ],
    value: 6
  ),

  // MARK: (A + B) + (C + D)

  (
    description: "(4 + 1) - (8 + 5)",
    lexemes: ["(", "4", "+", "1", ")", "-", "(", "8", "+", "5", ")"],
    infixTokens: [
      Parenthesis.open,
      Constant(term: 4),
      Operator.addition,
      Constant(term: 1),
      Parenthesis.close,
      Operator.subtraction,
      Parenthesis.open,
      Constant(term: 8),
      Operator.addition,
      Constant(term: 5),
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 4),
      Constant(term: 1),
      Operator.addition,
      Constant(term: 8),
      Constant(term: 5),
      Operator.addition,
      Operator.subtraction,
    ],
    value: -8
  ),
  (
    description: "(2 × 4) ÷ (9 × 7)",
    lexemes: ["(", "2", "×", "4", ")", "÷", "(", "9", "×", "7", ")"],
    infixTokens: [
      Parenthesis.open,
      Constant(term: 2),
      Operator.multiplication,
      Constant(term: 4),
      Parenthesis.close,
      Operator.division,
      Parenthesis.open,
      Constant(term: 9),
      Operator.multiplication,
      Constant(term: 7),
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 2),
      Constant(term: 4),
      Operator.multiplication,
      Constant(term: 9),
      Constant(term: 7),
      Operator.multiplication,
      Operator.division,
    ],
    value: 0
  ),
  (
    description: "(6 ÷ 1) + (8 ÷ 4)",
    lexemes: ["(", "6", "÷", "1", ")", "+", "(", "8", "÷", "4", ")"],
    infixTokens: [
      Parenthesis.open,
      Constant(term: 6),
      Operator.division,
      Constant(term: 1),
      Parenthesis.close,
      Operator.addition,
      Parenthesis.open,
      Constant(term: 8),
      Operator.division,
      Constant(term: 4),
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 6),
      Constant(term: 1),
      Operator.division,
      Constant(term: 8),
      Constant(term: 4),
      Operator.division,
      Operator.addition,
    ],
    value: 8
  ),
  (
    description: "(3 - 2) × (7 - 5)",
    lexemes: ["(", "3", "-", "2", ")", "×", "(", "7", "-", "5", ")"],
    infixTokens: [
      Parenthesis.open,
      Constant(term: 3),
      Operator.subtraction,
      Constant(term: 2),
      Parenthesis.close,
      Operator.multiplication,
      Parenthesis.open,
      Constant(term: 7),
      Operator.subtraction,
      Constant(term: 5),
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 3),
      Constant(term: 2),
      Operator.subtraction,
      Constant(term: 7),
      Constant(term: 5),
      Operator.subtraction,
      Operator.multiplication,
    ],
    value: 2
  ),
  (
    description: "(4 + 8) - (1 × 2)",
    lexemes: ["(", "4", "+", "8", ")", "-", "(", "1", "×", "2", ")"],
    infixTokens: [
      Parenthesis.open,
      Constant(term: 4),
      Operator.addition,
      Constant(term: 8),
      Parenthesis.close,
      Operator.subtraction,
      Parenthesis.open,
      Constant(term: 1),
      Operator.multiplication,
      Constant(term: 2),
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 4),
      Constant(term: 8),
      Operator.addition,
      Constant(term: 1),
      Constant(term: 2),
      Operator.multiplication,
      Operator.subtraction,
    ],
    value: 10
  ),
  (
    description: "(5 ÷ 7) + (6 - 9)",
    lexemes: ["(", "5", "÷", "7", ")", "+", "(", "6", "-", "9", ")"],
    infixTokens: [
      Parenthesis.open,
      Constant(term: 5),
      Operator.division,
      Constant(term: 7),
      Parenthesis.close,
      Operator.addition,
      Parenthesis.open,
      Constant(term: 6),
      Operator.subtraction,
      Constant(term: 9),
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 5),
      Constant(term: 7),
      Operator.division,
      Constant(term: 6),
      Constant(term: 9),
      Operator.subtraction,
      Operator.addition,
    ],
    value: -3
  ),
  (
    description: "(0 × 9) ÷ (3 + 1)",
    lexemes: ["(", "0", "×", "9", ")", "÷", "(", "3", "+", "1", ")"],
    infixTokens: [
      Parenthesis.open,
      Constant(term: 0),
      Operator.multiplication,
      Constant(term: 9),
      Parenthesis.close,
      Operator.division,
      Parenthesis.open,
      Constant(term: 3),
      Operator.addition,
      Constant(term: 1),
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 0),
      Constant(term: 9),
      Operator.multiplication,
      Constant(term: 3),
      Constant(term: 1),
      Operator.addition,
      Operator.division,
    ],
    value: 0
  ),
  (
    description: "(2 - 3) × (4 ÷ 5)",
    lexemes: ["(", "2", "-", "3", ")", "×", "(", "4", "÷", "5", ")"],
    infixTokens: [
      Parenthesis.open,
      Constant(term: 2),
      Operator.subtraction,
      Constant(term: 3),
      Parenthesis.close,
      Operator.multiplication,
      Parenthesis.open,
      Constant(term: 4),
      Operator.division,
      Constant(term: 5),
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 2),
      Constant(term: 3),
      Operator.subtraction,
      Constant(term: 4),
      Constant(term: 5),
      Operator.division,
      Operator.multiplication,
    ],
    value: 0
  ),
  (
    description: "(4d1 + 1) - (8 + 5)",
    lexemes: ["(", "4d1", "+", "1", ")", "-", "(", "8", "+", "5", ")"],
    infixTokens: [
      Parenthesis.open,
      Roll(times: 4, sides: 1),
      Operator.addition,
      Constant(term: 1),
      Parenthesis.close,
      Operator.subtraction,
      Parenthesis.open,
      Constant(term: 8),
      Operator.addition,
      Constant(term: 5),
      Parenthesis.close,
    ],
    postfixTokens: [
      Roll(times: 4, sides: 1),
      Constant(term: 1),
      Operator.addition,
      Constant(term: 8),
      Constant(term: 5),
      Operator.addition,
      Operator.subtraction,
    ],
    value: -8
  ),
  (
    description: "(2 × 4d1) ÷ (9 × 7)",
    lexemes: ["(", "2", "×", "4d1", ")", "÷", "(", "9", "×", "7", ")"],
    infixTokens: [
      Parenthesis.open,
      Constant(term: 2),
      Operator.multiplication,
      Roll(times: 4, sides: 1),
      Parenthesis.close,
      Operator.division,
      Parenthesis.open,
      Constant(term: 9),
      Operator.multiplication,
      Constant(term: 7),
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 2),
      Roll(times: 4, sides: 1),
      Operator.multiplication,
      Constant(term: 9),
      Constant(term: 7),
      Operator.multiplication,
      Operator.division,
    ],
    value: 0
  ),
  (
    description: "(6 ÷ 1) + (8d1 ÷ 4)",
    lexemes: ["(", "6", "÷", "1", ")", "+", "(", "8d1", "÷", "4", ")"],
    infixTokens: [
      Parenthesis.open,
      Constant(term: 6),
      Operator.division,
      Constant(term: 1),
      Parenthesis.close,
      Operator.addition,
      Parenthesis.open,
      Roll(times: 8, sides: 1),
      Operator.division,
      Constant(term: 4),
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 6),
      Constant(term: 1),
      Operator.division,
      Roll(times: 8, sides: 1),
      Constant(term: 4),
      Operator.division,
      Operator.addition,
    ],
    value: 8
  ),
  (
    description: "(3 - 2) × (7 - 5d1)",
    lexemes: ["(", "3", "-", "2", ")", "×", "(", "7", "-", "5d1", ")"],
    infixTokens: [
      Parenthesis.open,
      Constant(term: 3),
      Operator.subtraction,
      Constant(term: 2),
      Parenthesis.close,
      Operator.multiplication,
      Parenthesis.open,
      Constant(term: 7),
      Operator.subtraction,
      Roll(times: 5, sides: 1),
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 3),
      Constant(term: 2),
      Operator.subtraction,
      Constant(term: 7),
      Roll(times: 5, sides: 1),
      Operator.subtraction,
      Operator.multiplication,
    ],
    value: 2
  ),
  (
    description: "(4d1 + 8) - (1 × 2d1)",
    lexemes: ["(", "4d1", "+", "8", ")", "-", "(", "1", "×", "2d1", ")"],
    infixTokens: [
      Parenthesis.open,
      Roll(times: 4, sides: 1),
      Operator.addition,
      Constant(term: 8),
      Parenthesis.close,
      Operator.subtraction,
      Parenthesis.open,
      Constant(term: 1),
      Operator.multiplication,
      Roll(times: 2, sides: 1),
      Parenthesis.close,
    ],
    postfixTokens: [
      Roll(times: 4, sides: 1),
      Constant(term: 8),
      Operator.addition,
      Constant(term: 1),
      Roll(times: 2, sides: 1),
      Operator.multiplication,
      Operator.subtraction,
    ],
    value: 10
  ),
  (
    description: "(5 ÷ 7d1) + (6d1 - 9)",
    lexemes: ["(", "5", "÷", "7d1", ")", "+", "(", "6d1", "-", "9", ")"],
    infixTokens: [
      Parenthesis.open,
      Constant(term: 5),
      Operator.division,
      Roll(times: 7, sides: 1),
      Parenthesis.close,
      Operator.addition,
      Parenthesis.open,
      Roll(times: 6, sides: 1),
      Operator.subtraction,
      Constant(term: 9),
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 5),
      Roll(times: 7, sides: 1),
      Operator.division,
      Roll(times: 6, sides: 1),
      Constant(term: 9),
      Operator.subtraction,
      Operator.addition,
    ],
    value: -3
  ),
  (
    description: "(0d1 × 9d1) ÷ (3d1 + 1)",
    lexemes: ["(", "0d1", "×", "9d1", ")", "÷", "(", "3d1", "+", "1", ")"],
    infixTokens: [
      Parenthesis.open,
      Roll(times: 0, sides: 1),
      Operator.multiplication,
      Roll(times: 9, sides: 1),
      Parenthesis.close,
      Operator.division,
      Parenthesis.open,
      Roll(times: 3, sides: 1),
      Operator.addition,
      Constant(term: 1),
      Parenthesis.close,
    ],
    postfixTokens: [
      Roll(times: 0, sides: 1),
      Roll(times: 9, sides: 1),
      Operator.multiplication,
      Roll(times: 3, sides: 1),
      Constant(term: 1),
      Operator.addition,
      Operator.division,
    ],
    value: 0
  ),
  (
    description: "(2 - 3d1) × (4d1 ÷ 5d1)",
    lexemes: ["(", "2", "-", "3d1", ")", "×", "(", "4d1", "÷", "5d1", ")"],
    infixTokens: [
      Parenthesis.open,
      Constant(term: 2),
      Operator.subtraction,
      Roll(times: 3, sides: 1),
      Parenthesis.close,
      Operator.multiplication,
      Parenthesis.open,
      Roll(times: 4, sides: 1),
      Operator.division,
      Roll(times: 5, sides: 1),
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 2),
      Roll(times: 3, sides: 1),
      Operator.subtraction,
      Roll(times: 4, sides: 1),
      Roll(times: 5, sides: 1),
      Operator.division,
      Operator.multiplication,
    ],
    value: 0
  ),

  // MARK: (A + (B + C) + D)

  (
    description: "(1 + (9 - 4) - 2)",
    lexemes: ["(", "1", "+", "(", "9", "-", "4", ")", "-", "2", ")"],
    infixTokens: [
      Parenthesis.open,
      Constant(term: 1),
      Operator.addition,
      Parenthesis.open,
      Constant(term: 9),
      Operator.subtraction,
      Constant(term: 4),
      Parenthesis.close,
      Operator.subtraction,
      Constant(term: 2),
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 1),
      Constant(term: 9),
      Constant(term: 4),
      Operator.subtraction,
      Operator.addition,
      Constant(term: 2),
      Operator.subtraction,
    ],
    value: 4
  ),
  (
    description: "(5 × (0 ÷ 3) × 7)",
    lexemes: ["(", "5", "×", "(", "0", "÷", "3", ")", "×", "7", ")"],
    infixTokens: [
      Parenthesis.open,
      Constant(term: 5),
      Operator.multiplication,
      Parenthesis.open,
      Constant(term: 0),
      Operator.division,
      Constant(term: 3),
      Parenthesis.close,
      Operator.multiplication,
      Constant(term: 7),
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 5),
      Constant(term: 0),
      Constant(term: 3),
      Operator.division,
      Operator.multiplication,
      Constant(term: 7),
      Operator.multiplication,
    ],
    value: 0
  ),
  (
    description: "(8 - (4 × 6) + 1)",
    lexemes: ["(", "8", "-", "(", "4", "×", "6", ")", "+", "1", ")"],
    infixTokens: [
      Parenthesis.open,
      Constant(term: 8),
      Operator.subtraction,
      Parenthesis.open,
      Constant(term: 4),
      Operator.multiplication,
      Constant(term: 6),
      Parenthesis.close,
      Operator.addition,
      Constant(term: 1),
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 8),
      Constant(term: 4),
      Constant(term: 6),
      Operator.multiplication,
      Operator.subtraction,
      Constant(term: 1),
      Operator.addition,
    ],
    value: -15
  ),
  (
    description: "(3 ÷ (9 + 2) ÷ 6)",
    lexemes: ["(", "3", "÷", "(", "9", "+", "2", ")", "÷", "6", ")"],
    infixTokens: [
      Parenthesis.open,
      Constant(term: 3),
      Operator.division,
      Parenthesis.open,
      Constant(term: 9),
      Operator.addition,
      Constant(term: 2),
      Parenthesis.close,
      Operator.division,
      Constant(term: 6),
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 3),
      Constant(term: 9),
      Constant(term: 2),
      Operator.addition,
      Operator.division,
      Constant(term: 6),
      Operator.division,
    ],
    value: 0
  ),
  (
    description: "(0 + (3 - 6) × 4)",
    lexemes: ["(", "0", "+", "(", "3", "-", "6", ")", "×", "4", ")"],
    infixTokens: [
      Parenthesis.open,
      Constant(term: 0),
      Operator.addition,
      Parenthesis.open,
      Constant(term: 3),
      Operator.subtraction,
      Constant(term: 6),
      Parenthesis.close,
      Operator.multiplication,
      Constant(term: 4),
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 0),
      Constant(term: 3),
      Constant(term: 6),
      Operator.subtraction,
      Constant(term: 4),
      Operator.multiplication,
      Operator.addition,
    ],
    value: -12
  ),
  (
    description: "(2 × (5 + 8) - 1)",
    lexemes: ["(", "2", "×", "(", "5", "+", "8", ")", "-", "1", ")"],
    infixTokens: [
      Parenthesis.open,
      Constant(term: 2),
      Operator.multiplication,
      Parenthesis.open,
      Constant(term: 5),
      Operator.addition,
      Constant(term: 8),
      Parenthesis.close,
      Operator.subtraction,
      Constant(term: 1),
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 2),
      Constant(term: 5),
      Constant(term: 8),
      Operator.addition,
      Operator.multiplication,
      Constant(term: 1),
      Operator.subtraction,
    ],
    value: 25
  ),
  (
    description: "(9 ÷ (7 × 1) + 5)",
    lexemes: ["(", "9", "÷", "(", "7", "×", "1", ")", "+", "5", ")"],
    infixTokens: [
      Parenthesis.open,
      Constant(term: 9),
      Operator.division,
      Parenthesis.open,
      Constant(term: 7),
      Operator.multiplication,
      Constant(term: 1),
      Parenthesis.close,
      Operator.addition,
      Constant(term: 5),
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 9),
      Constant(term: 7),
      Constant(term: 1),
      Operator.multiplication,
      Operator.division,
      Constant(term: 5),
      Operator.addition,
    ],
    value: 6
  ),
  (
    description: "(4 - (6 ÷ 5) × 3)",
    lexemes: ["(", "4", "-", "(", "6", "÷", "5", ")", "×", "3", ")"],
    infixTokens: [
      Parenthesis.open,
      Constant(term: 4),
      Operator.subtraction,
      Parenthesis.open,
      Constant(term: 6),
      Operator.division,
      Constant(term: 5),
      Parenthesis.close,
      Operator.multiplication,
      Constant(term: 3),
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 4),
      Constant(term: 6),
      Constant(term: 5),
      Operator.division,
      Constant(term: 3),
      Operator.multiplication,
      Operator.subtraction,
    ],
    value: 1
  ),
  (
    description: "(1d1 + (9 - 4) - 2)",
    lexemes: ["(", "1d1", "+", "(", "9", "-", "4", ")", "-", "2", ")"],
    infixTokens: [
      Parenthesis.open,
      Roll(times: 1, sides: 1),
      Operator.addition,
      Parenthesis.open,
      Constant(term: 9),
      Operator.subtraction,
      Constant(term: 4),
      Parenthesis.close,
      Operator.subtraction,
      Constant(term: 2),
      Parenthesis.close,
    ],
    postfixTokens: [
      Roll(times: 1, sides: 1),
      Constant(term: 9),
      Constant(term: 4),
      Operator.subtraction,
      Operator.addition,
      Constant(term: 2),
      Operator.subtraction,
    ],
    value: 4
  ),
  (
    description: "(5 × (0d1 ÷ 3) × 7)",
    lexemes: ["(", "5", "×", "(", "0d1", "÷", "3", ")", "×", "7", ")"],
    infixTokens: [
      Parenthesis.open,
      Constant(term: 5),
      Operator.multiplication,
      Parenthesis.open,
      Roll(times: 0, sides: 1),
      Operator.division,
      Constant(term: 3),
      Parenthesis.close,
      Operator.multiplication,
      Constant(term: 7),
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 5),
      Roll(times: 0, sides: 1),
      Constant(term: 3),
      Operator.division,
      Operator.multiplication,
      Constant(term: 7),
      Operator.multiplication,
    ],
    value: 0
  ),
  (
    description: "(8 - (4 × 6d1) + 1)",
    lexemes: ["(", "8", "-", "(", "4", "×", "6d1", ")", "+", "1", ")"],
    infixTokens: [
      Parenthesis.open,
      Constant(term: 8),
      Operator.subtraction,
      Parenthesis.open,
      Constant(term: 4),
      Operator.multiplication,
      Roll(times: 6, sides: 1),
      Parenthesis.close,
      Operator.addition,
      Constant(term: 1),
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 8),
      Constant(term: 4),
      Roll(times: 6, sides: 1),
      Operator.multiplication,
      Operator.subtraction,
      Constant(term: 1),
      Operator.addition,
    ],
    value: -15
  ),
  (
    description: "(3 ÷ (9 + 2) ÷ 6d1)",
    lexemes: ["(", "3", "÷", "(", "9", "+", "2", ")", "÷", "6d1", ")"],
    infixTokens: [
      Parenthesis.open,
      Constant(term: 3),
      Operator.division,
      Parenthesis.open,
      Constant(term: 9),
      Operator.addition,
      Constant(term: 2),
      Parenthesis.close,
      Operator.division,
      Roll(times: 6, sides: 1),
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 3),
      Constant(term: 9),
      Constant(term: 2),
      Operator.addition,
      Operator.division,
      Roll(times: 6, sides: 1),
      Operator.division,
    ],
    value: 0
  ),
  (
    description: "(0d1 + (3 - 6) × 4d1)",
    lexemes: ["(", "0d1", "+", "(", "3", "-", "6", ")", "×", "4d1", ")"],
    infixTokens: [
      Parenthesis.open,
      Roll(times: 0, sides: 1),
      Operator.addition,
      Parenthesis.open,
      Constant(term: 3),
      Operator.subtraction,
      Constant(term: 6),
      Parenthesis.close,
      Operator.multiplication,
      Roll(times: 4, sides: 1),
      Parenthesis.close,
    ],
    postfixTokens: [
      Roll(times: 0, sides: 1),
      Constant(term: 3),
      Constant(term: 6),
      Operator.subtraction,
      Roll(times: 4, sides: 1),
      Operator.multiplication,
      Operator.addition,
    ],
    value: -12
  ),
  (
    description: "(2 × (5d1 + 8d1) - 1)",
    lexemes: ["(", "2", "×", "(", "5d1", "+", "8d1", ")", "-", "1", ")"],
    infixTokens: [
      Parenthesis.open,
      Constant(term: 2),
      Operator.multiplication,
      Parenthesis.open,
      Roll(times: 5, sides: 1),
      Operator.addition,
      Roll(times: 8, sides: 1),
      Parenthesis.close,
      Operator.subtraction,
      Constant(term: 1),
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 2),
      Roll(times: 5, sides: 1),
      Roll(times: 8, sides: 1),
      Operator.addition,
      Operator.multiplication,
      Constant(term: 1),
      Operator.subtraction,
    ],
    value: 25
  ),
  (
    description: "(9d1 ÷ (7d1 × 1d1) + 5)",
    lexemes: ["(", "9d1", "÷", "(", "7d1", "×", "1d1", ")", "+", "5", ")"],
    infixTokens: [
      Parenthesis.open,
      Roll(times: 9, sides: 1),
      Operator.division,
      Parenthesis.open,
      Roll(times: 7, sides: 1),
      Operator.multiplication,
      Roll(times: 1, sides: 1),
      Parenthesis.close,
      Operator.addition,
      Constant(term: 5),
      Parenthesis.close,
    ],
    postfixTokens: [
      Roll(times: 9, sides: 1),
      Roll(times: 7, sides: 1),
      Roll(times: 1, sides: 1),
      Operator.multiplication,
      Operator.division,
      Constant(term: 5),
      Operator.addition,
    ],
    value: 6
  ),
  (
    description: "(4 - (6d1 ÷ 5d1) × 3d1)",
    lexemes: ["(", "4", "-", "(", "6d1", "÷", "5d1", ")", "×", "3d1", ")"],
    infixTokens: [
      Parenthesis.open,
      Constant(term: 4),
      Operator.subtraction,
      Parenthesis.open,
      Roll(times: 6, sides: 1),
      Operator.division,
      Roll(times: 5, sides: 1),
      Parenthesis.close,
      Operator.multiplication,
      Roll(times: 3, sides: 1),
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 4),
      Roll(times: 6, sides: 1),
      Roll(times: 5, sides: 1),
      Operator.division,
      Roll(times: 3, sides: 1),
      Operator.multiplication,
      Operator.subtraction,
    ],
    value: 1
  ),

  // MARK: (A + B ÷ C × (D + E) - F)

  (
    description: "(1 + 2 ÷ 3 × (4 + 5) - 6)",
    lexemes: ["(", "1", "+", "2", "÷", "3", "×", "(", "4", "+", "5", ")", "-", "6", ")"],
    infixTokens: [
      Parenthesis.open,
      Constant(term: 1),
      Operator.addition,
      Constant(term: 2),
      Operator.division,
      Constant(term: 3),
      Operator.multiplication,
      Parenthesis.open,
      Constant(term: 4),
      Operator.addition,
      Constant(term: 5),
      Parenthesis.close,
      Operator.subtraction,
      Constant(term: 6),
      Parenthesis.close,
    ],
    postfixTokens: [
      Constant(term: 1),
      Constant(term: 2),
      Constant(term: 3),
      Operator.division,
      Constant(term: 4),
      Constant(term: 5),
      Operator.addition,
      Operator.multiplication,
      Operator.addition,
      Constant(term: 6),
      Operator.subtraction,
    ],
    value: -5
  ),
  (
    description: "(1d1 + 2d1 ÷ 3d1 × (4d1 + 5d1) - 6d1)",
    lexemes: [
      "(",
      "1d1",
      "+",
      "2d1",
      "÷",
      "3d1",
      "×",
      "(",
      "4d1",
      "+",
      "5d1",
      ")",
      "-",
      "6d1",
      ")",
    ],
    infixTokens: [
      Parenthesis.open,
      Roll(times: 1, sides: 1),
      Operator.addition,
      Roll(times: 2, sides: 1),
      Operator.division,
      Roll(times: 3, sides: 1),
      Operator.multiplication,
      Parenthesis.open,
      Roll(times: 4, sides: 1),
      Operator.addition,
      Roll(times: 5, sides: 1),
      Parenthesis.close,
      Operator.subtraction,
      Roll(times: 6, sides: 1),
      Parenthesis.close,
    ],
    postfixTokens: [
      Roll(times: 1, sides: 1),
      Roll(times: 2, sides: 1),
      Roll(times: 3, sides: 1),
      Operator.division,
      Roll(times: 4, sides: 1),
      Roll(times: 5, sides: 1),
      Operator.addition,
      Operator.multiplication,
      Operator.addition,
      Roll(times: 6, sides: 1),
      Operator.subtraction,
    ],
    value: -5
  ),
]
